{"ast":null,"code":"import _objectSpread from \"@babel/runtime-corejs2/helpers/esm/objectSpread\";\nimport _toConsumableArray from \"@babel/runtime-corejs2/helpers/esm/toConsumableArray\";\nimport _classCallCheck from \"@babel/runtime-corejs2/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime-corejs2/helpers/esm/createClass\";\nimport validator from 'validator';\n\nvar FormValidator =\n/*#__PURE__*/\nfunction () {\n  function FormValidator(validations) {\n    _classCallCheck(this, FormValidator);\n\n    // validations is an array of rules specific to a form\n    this.validations = validations;\n  }\n\n  _createClass(FormValidator, [{\n    key: \"validate\",\n    value: function validate(state) {\n      // start out assuming valid\n      var validation = this.valid(); // for each validation rule\n\n      this.validations.forEach(function (rule) {\n        // if the field isn't already marked invalid by an earlier rule\n        if (!validation[rule.field].isInvalid) {\n          // determine the field value, the method to invoke and\n          // optional args from the rule definition\n          var field_value = state[rule.field].toString();\n          var args = rule.args || [];\n          var validation_method = typeof rule.method === 'string' ? validator[rule.method] : rule.method; // call the validation_method with the current field value\n          // as the first argument, any additional arguments, and the\n          // whole state as a final argument.  If the result doesn't\n          // match the rule.validWhen property, then modify the\n          // validation object for the field and set the isValid\n          // field to false\n\n          if (validation_method.apply(void 0, [field_value].concat(_toConsumableArray(args), [state])) != rule.validWhen) {\n            validation[rule.field] = {\n              isInvalid: true,\n              message: rule.message\n            };\n            validation.isValid = false;\n          }\n        }\n      });\n      return validation;\n    } // create a validation object for a valid form\n\n  }, {\n    key: \"valid\",\n    value: function valid() {\n      var validation = {};\n      this.validations.map(function (rule) {\n        return validation[rule.field] = {\n          isInvalid: false,\n          message: ''\n        };\n      });\n      return _objectSpread({\n        isValid: true\n      }, validation);\n    }\n  }]);\n\n  return FormValidator;\n}();\n\nexport default FormValidator;","map":{"version":3,"sources":["D:\\dev\\TutorFinal\\web\\formValidator.js"],"names":["validator","FormValidator","validations","state","validation","valid","forEach","rule","field","isInvalid","field_value","toString","args","validation_method","method","validWhen","message","isValid","map"],"mappings":";;;;AAAA,OAAOA,SAAP,MAAsB,WAAtB;;IAEMC,a;;;AACJ,yBAAYC,WAAZ,EAAyB;AAAA;;AACvB;AACA,SAAKA,WAAL,GAAmBA,WAAnB;AACD;;;;6BAEQC,K,EAAO;AACd;AACA,UAAIC,UAAU,GAAG,KAAKC,KAAL,EAAjB,CAFc,CAGd;;AACA,WAAKH,WAAL,CAAiBI,OAAjB,CAAyB,UAAAC,IAAI,EAAI;AAE/B;AACA,YAAI,CAACH,UAAU,CAACG,IAAI,CAACC,KAAN,CAAV,CAAuBC,SAA5B,EAAuC;AACrC;AACA;AACA,cAAMC,WAAW,GAAGP,KAAK,CAACI,IAAI,CAACC,KAAN,CAAL,CAAkBG,QAAlB,EAApB;AACA,cAAMC,IAAI,GAAGL,IAAI,CAACK,IAAL,IAAa,EAA1B;AACA,cAAMC,iBAAiB,GAAG,OAAON,IAAI,CAACO,MAAZ,KAAuB,QAAvB,GACFd,SAAS,CAACO,IAAI,CAACO,MAAN,CADP,GAEFP,IAAI,CAACO,MAF7B,CALqC,CAQrC;AACA;AACA;AACA;AACA;AACA;;AACA,cAAGD,iBAAiB,MAAjB,UAAkBH,WAAlB,4BAAkCE,IAAlC,IAAwCT,KAAxC,OAAkDI,IAAI,CAACQ,SAA1D,EAAqE;AACnEX,YAAAA,UAAU,CAACG,IAAI,CAACC,KAAN,CAAV,GAAyB;AACvBC,cAAAA,SAAS,EAAE,IADY;AAEvBO,cAAAA,OAAO,EAAET,IAAI,CAACS;AAFS,aAAzB;AAIAZ,YAAAA,UAAU,CAACa,OAAX,GAAqB,KAArB;AACD;AACF;AACF,OAzBD;AA0BA,aAAOb,UAAP;AACD,K,CAED;;;;4BACQ;AACN,UAAMA,UAAU,GAAG,EAAnB;AAEA,WAAKF,WAAL,CAAiBgB,GAAjB,CAAqB,UAAAX,IAAI;AAAA,eACrBH,UAAU,CAACG,IAAI,CAACC,KAAN,CAAV,GAAyB;AAAEC,UAAAA,SAAS,EAAE,KAAb;AAAoBO,UAAAA,OAAO,EAAE;AAA7B,SADJ;AAAA,OAAzB;AAGA;AAASC,QAAAA,OAAO,EAAE;AAAlB,SAA2Bb,UAA3B;AACD;;;;;;AAEH,eAAeH,aAAf","sourcesContent":["import validator from 'validator';\r\n\r\nclass FormValidator {\r\n  constructor(validations) {\r\n    // validations is an array of rules specific to a form\r\n    this.validations = validations;\r\n  }\r\n\r\n  validate(state) {\r\n    // start out assuming valid\r\n    let validation = this.valid();\r\n    // for each validation rule\r\n    this.validations.forEach(rule => {\r\n    \r\n      // if the field isn't already marked invalid by an earlier rule\r\n      if (!validation[rule.field].isInvalid) {\r\n        // determine the field value, the method to invoke and\r\n        // optional args from the rule definition\r\n        const field_value = state[rule.field].toString();\r\n        const args = rule.args || [];\r\n        const validation_method = typeof rule.method === 'string' ?\r\n                                validator[rule.method] :\r\n                                rule.method\r\n        // call the validation_method with the current field value\r\n        // as the first argument, any additional arguments, and the\r\n        // whole state as a final argument.  If the result doesn't\r\n        // match the rule.validWhen property, then modify the\r\n        // validation object for the field and set the isValid\r\n        // field to false\r\n        if(validation_method(field_value, ...args, state) != rule.validWhen) {\r\n          validation[rule.field] = { \r\n            isInvalid: true, \r\n            message: rule.message \r\n          }\r\n          validation.isValid = false;\r\n        }\r\n      }\r\n    });\r\n    return validation;\r\n  }\r\n  \r\n  // create a validation object for a valid form\r\n  valid() {\r\n    const validation = {}\r\n    \r\n    this.validations.map(rule => (\r\n        validation[rule.field] = { isInvalid: false, message: '' }\r\n    ));\r\n    return { isValid: true, ...validation };\r\n  }\r\n}\r\nexport default FormValidator;"]},"metadata":{},"sourceType":"module"}