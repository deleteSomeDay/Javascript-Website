{"ast":null,"code":"import _objectSpread from \"@babel/runtime-corejs2/helpers/esm/objectSpread\";\nimport _toConsumableArray from \"@babel/runtime-corejs2/helpers/esm/toConsumableArray\";\nimport _classCallCheck from \"@babel/runtime-corejs2/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime-corejs2/helpers/esm/createClass\";\nimport validator from 'validator';\n\nvar FormValidator =\n/*#__PURE__*/\nfunction () {\n  function FormValidator(validations) {\n    _classCallCheck(this, FormValidator);\n\n    // validations is an array of rules specific to a form\n    this.validations = validations;\n  }\n\n  _createClass(FormValidator, [{\n    key: \"validate\",\n    value: function validate(state) {\n      var validation = this.valid(); // for each validation rule\n\n      this.validations.forEach(function (rule) {\n        // if the field isn't already marked invalid by an earlier rule\n        if (!validation[rule.field].isInvalid) {\n          // determine the field value, the method to invoke and\n          // optional args from the rule definition\n          console.log(rule.field);\n          var field_value = state[rule.field].toString();\n          var args = rule.args || [];\n          var validation_method = typeof rule.method === 'string' ? validator[rule.method] : rule.method; // call the validation_method with the current field value\n          // as the first argument, any additional arguments, and the\n          // whole state as a final argument.  If the result doesn't\n          // match the rule.validWhen property, then modify the\n          // validation object for the field and set the isValid\n          // field to false\n\n          if (validation_method.apply(void 0, [field_value].concat(_toConsumableArray(args), [state])) != rule.validWhen) {\n            validation[rule.field] = {\n              isInvalid: true,\n              message: rule.message\n            };\n            validation.isValid = false;\n          }\n        }\n      });\n      return validation;\n    } // create a validation object for a valid form\n\n  }, {\n    key: \"valid\",\n    value: function valid() {\n      var validation = {};\n      this.validations.map(function (rule) {\n        return validation[rule.field] = {\n          isInvalid: false,\n          message: ''\n        };\n      });\n      return _objectSpread({\n        isValid: true\n      }, validation);\n    }\n  }]);\n\n  return FormValidator;\n}();\n\nexport default FormValidator;","map":null,"metadata":{},"sourceType":"module"}